----------------------------------------
Introduction to Programming with Python
----------------------------------------

-------------
Lecture 0
Fucnticons, Variables
-------------
- Arguments - inputs to a fucntion
- Sample function:
print("NAME")

- Bugs - a mistake in a program
- Variable - a container for some vaule

= (equal sign) - assignement character

- Passing multiple arguments to a funcition it adds space characert by default
var = NAME
print("Hello,", var)

- str - string data type
- format string
var = NAME
print(f"Hello, {var}")

- int - integers
- specify how many character to print when using f-strings
print(f"{VAR:.2f}")
- This print two characters after value VAR

- def - define a function

-------------
Lecture 1
Conditionals
-------------
>
>=
<
<=
==
!=

if
- ability to ask questions in Python
- Sample: if following block of code is true, run certain code

elif
- else and if combined

else

or
- Ask two questions

and

match

-------------
Lecture 2
Loops
-------------
while

i = i + 1, same as i += 1

for

list
a = []

range()
- return a range of vaules

_
- use underscore symbol to signify the varaiable that is required to use by other feature

- Sample loops
- Ask user for n, then loop through that number:
while True:
    n = int(input("What's n? "))
    if n > 0:
        break

for _ in range(n):
    print("meow")

- Loops defined as functions:
def main():
    number = get_number()
    meow(number)

def get_number():
    while True:
        n = int(input("What's n? "))
        if n > 0:
            return n

def meow(n):
    for _ in range(n):
        print("meow")

main()

len
- length function
- Sample len usage:
students = ["Hermione", "Harry", "Ron"]

for i in range(len(students)):
    print(i + 1, students[i])


dict
- dictionary
- empty disctionary:
var = {}
- accessing values in a dictionary:
students= {
    "Hermione": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin"
}

print(students["Hermione"])
print(students["Harry"])
print(students["Ron"])
print(students["Draco"])

- Access key and values in a dictionary:
students = {
    "Hermione": "Gryffindor",
    "Harry": "Gryffindor",
    "Ron": "Gryffindor",
    "Draco": "Slytherin"
}

for student in students:
    print(student, students[student], sep =", ")

None
- absense of a value


-------------
Lecture 3
Exceptions
-------------

Syntax error

Value error
- incorrect input to the Python script

try, except
- try to do something, except if something goes wrong I can do something else

Sample try, except:
try:
    x = int(input("What's x? "))
    print(f"x is {x}")
except ValueError:
    print("x is not an integer")

NameError
- error in the code that programmer wrote

else
Sample else:
try:
    x = int(input("What's x? "))
except ValueError:
    print("x is not an integer")
else:
    print(f"x is {x}")

Sample with while:
while True:
    try:
        x = int(input("What's x? "))
    except ValueError:
        print("x is not an integer")
    else:
        break

print(f"x is {x}")

Function implementation
def main():
    x = get_int()
    print(f"x is {x}")

def get_int():
    while True:
        try:
            x = int(input("What's x? "))
        except ValueError:
            print("x is not an integer")
        else:
            return x
    
    
main()

pass
Sample pass:
def main():
    x = get_int()
    print(f"x is {x}")

def get_int():
    while True:
        try:
            return int(input("What's x? "))
        except ValueError:
            pass   
    
main()

raise
- Raise exceptions in Python by yourself

-------------
Debugging
-------------

brakpoints
- ability to specify in vs code, as well as other editors to pause executing code further


-------------
Lecture 4
Libraries
-------------
modules
- library in Python that has one or more features built into it
- encourage reusability of code

random
- built-in library

import
- allow to import modules to Python code

from
- keyword to specify which function to import from a module

random.choice(seq)
random.randint(a, b)
random.shuffle(x)

statistics
- Python library

command-line arguments

sys
- System module

sys.argv
- argument vector
- variable as a list
- Sample:
import sys

print("Hello, my name is", sys.argv[1])

CLI: py name.py NAME

sys.exit()
- function that exits the program
- Sample:
import sys

if len(sys.argv) < 2:
    sys.exit("Too few arguments")
elif len(sys.argv) > 2:
    sys.exit("Two many arguments")

print("Hello, my name is", sys.argv[1])

slices
- Specify which element in a list to use
- Sample:
import sys

if len(sys.argv) < 2:
    sys.exit("Too few arguments")

for arg in sys.argv[1:]:
    print("Hello, my name is", arg)

packages
- third-party libraries

PyPI
- Python Package Index
- pypi.org

cowsay
- Python package

pip
- Python package installer

APIs
- Application Programming Interface

requests
- Python package
- requests library allows us to make web requests using Python code

JSON
- JavaScript Object Notation
- language-agnostic format for exchanging data between computers

requests.get()
- .get() is a function inside requests package that allows to get a response from a server

.json()
- Response will be provided in JSON format

json
- Built-in Python library

json.dumps()
- JSON dump string

__name__
- special variable in Python

-------------
Lecture 5
Unit Test
-------------

assert
- to assert is something is true
- Sample:
from calculator import sqaure

def main():
    test_square()

def test_square():
    try:
        assert sqaure(2) == 4
    except AssertionError:
        print("2 squared was not 2")
    try:
        assert sqaure(3) == 9
    except AssertionError:
        print("3 squared was not 9")

if __name__ == "__main__":
    main()

- calulator.py:
def main():
    x = int(input("What's x? "))
    print("x sqaured is", sqaure(x))

def sqaure(n):
    return n + n

if __name__ == "__main__":
    main()

pytest
- third-party program that helps with testing Python code
- install with pip
- Sample:

from calculator import sqaure

def test_square():
    assert sqaure(2) == 4
    assert sqaure(3) == 9
    assert sqaure(-2) == 4
    assert sqaure(-3) == 9
    assert sqaure(0) == 0

- Test with pytest FileName.py
- Other sample, multiple tests:

from calculator import sqaure

def test_positive():
    assert sqaure(2) == 4
    assert sqaure(3) == 9


def test_negative():
    assert sqaure(-2) == 4
    assert sqaure(-3) == 9


def test_zero():
    assert sqaure(0) == 0

packages
- Python module(s), that are organised inside of a folder
- __init__.py - treat the folder as a package

-------------
Lecture 6 - File I/O
-------------

open()
- Python function
- to open a file

"w"
- write to a file

"a"
- append a file

- Sample:

name = input("What's your name? ")

file = open("names.txt", "a")
file.write(f"{name}\n")
file.close()

with
- in this context open and automatically close the files
- Sample:

name = input("What's your name? ")

with open("names.txt", "a") as file:
    file.write(f"{name}\n")

"r"
- read mode
- default mode
- Sample:

with open("names.txt", "r") as file:
    for line in file:
        print("hello,", line.strip())

sorted
- Sample:

names = []

with open("names.txt") as file:
    for line in file:
        names.append(line.rstrip())


for name in sorted(names):
    print(f"hello, {name}")

CSV
- Comma-Separated Values
- Sample:

with open("students.csv") as file:
    for line in file:
        row = line.rstrip().split(",")
        print(f"{row[0]} is in {row[1]}")

- Sample, using two variables:

with open("students.csv") as file:
    for line in file:
        name, house = line.rstrip().split(",")
        print(f"{name} is in {house}")

- Sample, sorted:

students = []

with open("students.csv") as file:
    for line in file:
        name, house = line.rstrip().split(",")
        students.append(f"{name} is in {house}")

for student in sorted(students):
    print(student)

Keys
- Python feature
- Python allows to pass functions as arguments to other functions
- Sample

def get_name(student):
    return student["name"]

for student in sorted(students, key=get_name):
    print(f"{student['name']} is in {student['house']}")

Lambda Functions
- Anonymous function
- Function that does not have a name
- Sample:

for student in sorted(students, key=lambda student: student["name"]):
    print(f"{student['name']} is in {student['house']}")

csv Library


-------------
Lecture 7
Regular Expressions
-------------

Basic pattern matching
-Sample
---
email = input("What's your email? ").strip()

username, domain = email.split("@")

if username and domain.endswith(".edu"):
    print("Valid")
else:
    print("Invalid")
---

re
- Regular Expression library

re.search(pattern, string, flags=0)
- search function available in re library

RE symbols
. any character except a newline
* 0 or more repetitions
+ 1 or more repetitions, "one or more of the thigns to the left"
? 0 or 1 repetiion
{m} m repetitions
{m,n} m-n repetitions
^ matches the start of the string
$ matches the end of the string or just before the newline at the end of the string
[] set of characters
[^] complementing the set, do not match any characters in the set
[_] search for underscores

Character Classes
\d decimal digit
\D not a decimal digit
\s whitespace characters, not only a single space, but a tab as well
\S not a whitespace character
\w word chracter, as well as numbers and the underscore
\W not a work character

A|B either A or B
(...) a group
(?:...) non-capturing version, use parentheses but do not capture the value

Flags
re.IGNORECASE
re.MULTILINE, search multiple lines for same pattern
re.DOTALL, any character plus a new line

Python RAW input
r""

re.match(pattern, string flags=0)
^pattern

re.fullmatch(pattern, string flags=0)
^pattern$

Capturing Groups
(...)
- anything that is surounded in parentheses will be returned as a return value
- VAR.groups(n), ask for return value

:=
- the walrus operator
- assign something from right to left and ask an if or else questions at once

.replace(old, new)
- replace method for strings

removeprefix()
- remove string that comes at the start of another

re.sub(pattern, repl, string, count=0, flags=0)
- substitute
- pattern - Regex
- repl - a replacement string
- string - string to search

Remeber to escape special characters.
Example https:\\twitter\.com

re.spli(pattern, string, maxsplit=0, flags=0)
- split by using multiple characters

re.findall(pattern, string, flags=0)
- search for multiple copies of same patternt in differernt places in the string
